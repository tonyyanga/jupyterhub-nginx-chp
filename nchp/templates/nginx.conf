# Let nginx automatically determine the number of worker processes
# to run. This defaults to number of cores on the host.
worker_processes auto;

# Do not daemonize - we'll either run this under a supervisor
# ourselves, or jupyterhub will manage the process, restarting
# it when it dies as necessary
daemon off;

# Set number of connections accepted per worker
# We set worker_processes to auto, so total number of connections is
# 1024 * number of cores on the machine
events {
    worker_connections 1024;
}

# 2x of worker_connections, since a connection uses up 2 fds
worker_rlimit_nofile 2048;

# This needs to be in 'main' since otherwise nginx
# will try to write to /var/log/nginx/error.log and failed
# because it does not have permissions
error_log stderr warn;

# We do not really need / care about a pidfile
# No real way to disable this, keep it away
pid /tmp/nchp.pid;

http {
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    # server_tokens off;

    # These are varilous temp file paths, many that we do not use.
    # They are by default set to /var/lib/nginx/*, which causes
    # problems when running as non-root, as we are here. So we
    # shall set them all to /tmp. FIXME: Find proper paths for
    # these somewhere (perhaps on current-dir?)
    client_body_temp_path /tmp;
    proxy_temp_path /tmp;
    fastcgi_temp_path /tmp;
    uwsgi_temp_path /tmp;
    scgi_temp_path /tmp;

    # Disable buffering in /tmp
    proxy_max_temp_file_size 0;

    # access_log does not support 'stderr' directive directly
    access_log /dev/stderr;

    # nginx needs an async way to resolve hostnames to IPs, and
    # the default `gethostbyname` setup does not allow for this.
    # While ideally nginx should parse /etc/resolv.conf itself,
    # it does not do so at this time, and needs us to set the DNS
    # server explicitly. This can be specified by the user, but
    # defaults to a value we parse out of /etc/resolv.conf.
    # NOTE: This causes issues when resolving `localhost` and
    # other hostnames traditionally set in /etc/hosts, since
    # DNS servers respond erratically to queries for them.
    resolver {{ dns_resolver }};

    # This is used to support websocket proxying. We need to set
    # the 'Upgrade' HTTP header to either 'upgrade' (for websockets)
    # or 'close' (for everything else). See https://www.nginx.com/resources/admin-guide/reverse-proxy/
    # for more details.
    map $http_upgrade $connection_upgrade {
            default upgrade;
            ''      close;
    }

    # The shared memory area used to store route config.
    # This is shared across all workers, and stores only
    # the mapping between a route prefix and target.
    # FIXME: Make this configurable
    lua_shared_dict routes 16m;
    #
    # The shared memory area used to store mapping of route to 'user'
    # field of the proxy.
    # FIXME: Make this configurable.
    # FIXME: Find out why this is needed.
    lua_shared_dict users 16m;

    # Shared memory dictionary that sets when a route last was used
    lua_shared_dict lastaccess 16m;

    # This is the 'regular' server, that sees all public
    # traffic and proxies them to the appropriate backend server.
    server {
        # FIXME: Allow listening on multiple IPs (for ipv6?)
        listen {{public_ip}}:{{ public_port }} {% if public_ssl %}ssl{% endif %};

        {% if public_ssl %}
        ssl on;
        server_name datahub-dev.berkeley.edu;
        ssl_protocols TLSv1.2;
        ssl_prefer_server_ciphers on;
        ssl_ciphers '-ALL:{{ public_ssl_ciphers }}';

        {% if public_ssl_dhparam %}
        ssl_dhparam {{ public_ssl_dhparam }};
        {% endif %}

        ssl_certificate {{ public_ssl_cert }};
        ssl_certificate_key {{ public_ssl_key }};
        {% endif %}

        # Set a high client body size by default
        # You will probably run into other timeouts before that
        client_max_body_size {{ client_max_body_size }};
        location / {
            # We use lua code to determine which backend this URL will go
            # to. It checks the route table (maintained by the api server{}
            # block below) from the shared lua dict, and if no route matches,
            # either sends it to the default if a default is set or 404s.

            # We declare an nginx variable here, since lua code can't set
            # variables that have not been declared
            set $upstream "";

            access_by_lua '
                {% include 'access.lua' %}
            ';

            proxy_pass $upstream;

            proxy_http_version 1.1;

            # This is required for websockets to be proxied correctly
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;

            # This is required for the target servers to know what
            # exactly the original protocol / URI / Host was.
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Original-URI $request_uri;
            # We explicitly use $http_host rather than $host because we want to
            # preserve the Host headers coming in from the client. $host never
            # includes ports, and causes notebooks to fail a cross origin check,
            # since they check Host vs the Origin.
            proxy_set_header Host $http_host;
        }
    }

    # This is the API server, which only JupyterHub talks to.
    # This is protected by requiring an Authentication header.
    server {
        listen {{api_ip}}:{{api_port}} {% if api_ssl %}ssl{% endif %};

        {% if api_ssl %}
        ssl_protocols TLSv1.2;
        ssl_prefer_server_ciphers on;
        ssl_ciphers '-ALL:{{ api_ssl_ciphers }}'';

        {% if api_ssl_dhparam %}
        ssl_dhparam {{ api_ssl_dhparam }};
        {% endif %}

        ssl_certificate {{ api_ssl_cert }};
        ssl_certificate_key {{ api_ssl_key }};
        {% endif %}

        location /api/routes {
            content_by_lua '
            {% include 'api.lua' %}
            ';
        }
    }
}
